<?xml version="1.0" encoding="UTF-8"?>
<project name="Do stuff for a2h d7" default="main" phingVersion="2.5">

    <!--  does a complete build of the project. -->
    <target name="main"
            depends="load-project-properties, setup-phing-drush, fetch-core-contrib-code, fetch-custom-code, site-install">

        <if>
            <or>
                <istrue value="${development}"/>
            </or>
            <then>
                <phingcall target="set-development-environment"/>
            </then>
        </if>

    </target>

    <!-- loads a set of project specific properties from a `.properties` file -->
    <target name="load-properties">
        <property file="build.properties"/>
        <!--<property file="build.default.properties"/>-->
    </target>

    <!-- loads a set of project specific properties from a `.properties` file -->
    <target name="load-project-properties" depends="load-properties">
        <property
                file="projects/${project.name.short}/${project.name.short}.build.properties"/>
    </target>

    <!-- fetches drupal core and contrib code -->
    <target name="fetch-core-contrib-code"
            depends="setup-phing-drush, load-project-properties">
        <!--<if>-->
        <!--<or>-->
        <!--<istrue value="${build.force}" />-->
        <!--</or>-->
        <!--<then>-->
        <!--<delete includeemptydirs="true" dir="${environment.root}" />-->
        <!--</then>-->
        <!--</if>-->

        <!--downloads the appropriate version of Drupal -->
        <drush command="dl" assume="yes">
            <param>drupal-${drupal.version}</param>
            <option name="drupal-project-rename">${environment.root}</option>
        </drush>

        <if>
            <not>
                <available
                        file="${environment.root}/${contrib.modules.destination}"
                        type="dir"/>
            </not>
            <then>
                <mkdir dir="${environment.root}/${contrib.modules.destination}"/>
            </then>
        </if>

        <phingcall target="fetch-contrib-code"/>

        <!-- applies patches
        <foreach param="filename" absparam="absfilename" target="apply-patch">
          <fileset dir="${environment.patches.dir}">
            <include name="*.patch" />
          </fileset>
        </foreach>
        -->

    </target>

    <target name="fetch-contrib-code"
            depends="load-project-properties, setup-phing-drush">
        <!-- downloads the contributed modules -->
        <drush command="make" assume="yes">
            <param>${project.make}</param>
            <option name="contrib-destination">
                ${environment.root}/${contrib.modules.destination}
            </option>
            <option name="no-core"/>
            <option name="verbose"/>
        </drush>
    </target>

    <!-- fetch all custom code from cnect & multisite svn repo -->
    <target name="fetch-custom-code" depends="load-project-properties">

        <!-- delete folder if needed -->
        <if>
            <or>
                <istrue value="${build.force}"/>
            </or>
            <then>
                <echo msg="test"/>
                <delete includeemptydirs="true"
                        dir="${environment.root}/${project.modules.destination}"/>
                <delete includeemptydirs="true"
                        dir="${environment.root}/${project.themes.destination}"/>
                <delete includeemptydirs="true"
                        dir="${environment.root}/${multisite.modules.destination}"/>
                <delete includeemptydirs="true"
                        dir="${environment.root}/profiles/${project.name.short}"/>
                <mkdir dir="${environment.root}/${project.modules.destination}"/>
                <mkdir dir="${environment.root}/${project.themes.destination}"/>
                <mkdir dir="${environment.root}/${multisite.modules.destination}"/>
            </then>
        </if>

        <!-- copies the install profile bundled with the make file to the appropriate directory. -->
        <if>
            <available
                    file="projects/${project.name.short}/profile/${project.name.short}.profile"/>

            <then>
                <copy todir="${environment.root}/profiles/${project.profile}/">
                    <fileset dir="projects/${project.name.short}/profile">
                        <include name="${project.name.short}.profile"/>
                        <include name="${project.name.short}.info"/>
                        <include name="${project.name.short}.install"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <phingcall target="fetch-multisite-code"/>
        <phingcall target="fetch-project-code"/>
        <phingcall target="link-project-modules"/>

    </target>

    <target name="fetch-multisite-code" depends="load-project-properties">
        <foreach list="${multisite.modules}" param="module"
                 target="fetch-multisite-module"/>
        <foreach list="${multisite.features}" param="feature"
                 target="fetch-multisite-feature"/>
        <foreach list="${multisite.themes}" param="theme"
                 target="fetch-multisite-theme"/>
    </target>

    <target name="fetch-project-code" depends="load-project-properties">
        <foreach list="${project.modules}" param="module"
                 target="fetch-project-module"/>
        <foreach list="${project.modules2}" param="module"
                 target="fetch-project-module2"/>
        <foreach list="${project.modules3}" param="module"
                 target="fetch-project-module3"/>
        <foreach list="${project.features}" param="feature"
                 target="fetch-project-feature"/>
        <foreach list="${project.themes}" param="theme"
                 target="fetch-project-theme"/>
    </target>

    <!-- installs the website using a custom profile . enable dev settings if it is a dev site-->
    <target name="site-install"
            depends="load-project-properties, setup-phing-drush">

        <drush command="site-install" assume="yes">
            <option name="db-url">
                mysqli://${db.user}:${db.pass}@${db.host}:${db.port}/${db.name}
            </option>
            <option name="account-name">${drupal.user}</option>
            <option name="account-pass">${drupal.pass}</option>
            <option name="uri">${project.uri}</option>
            <option name="root">${project.root}/${environment.root}</option>
            <option name="site-name">${project.name.pretty}</option>
            <param>${project.profile}</param>
        </drush>

    </target>


    <target name="setup-phing-drush" depends="load-project-properties">

        <!-- Clone the project -->
        <phingcall target="setup-git-repo">
            <property name="repo.dir"
                      value="${environment.tools.dir}/phingdrushtask"/>
            <property name="repo.url" value="${phing.drush.repository.url}"/>
            <property name="repo.revision"
                      value="${phing.drush.repository.revision}"/>
        </phingcall>

        <!-- Register as custom Phing task -->
        <taskdef name="drush" classname="DrushTask"
                 classpath="${environment.tools.dir}/phingdrushtask"/>
        <!-- Run drush from the project Drupal directory -->
        <!--    <property name="drush.root" value="${environment.root}"/>
        <property name="drush.uri" value="${environment.root}"/> -->
        <!-- Use Drush installed by composer -->
        <if>
            <equals arg1="${phing.drush.system}" arg2="true"/>
            <then>
            </then>
            <else>
                <property name="drush.bin" value="${phing.drush.bin}"/>
            </else>
        </if>
        <!-- Assume yes by default -->
        <property name="drush.assume" value="yes"/>
    </target>

    <!-- GIT -->
    <target name="setup-git-repo">
        <if>
            <not>
                <available file="${repo.dir}"/>
            </not>
            <then>
                <property name="repo.revision" value="HEAD" override="false"/>
                <exec command="git clone ${repo.url} ${repo.dir}"/>
                <exec command="git checkout ${repo.revision}"
                      dir="${repo.dir}"/>
            </then>
        </if>
    </target>

    <target name="dev-settings" depends="load-project-properties">
        <property name="settings.file"
                  value="${environment.root}/sites/default/settings.php"/>
        <chmod file="${settings.file}" mode="755" failonerror="true"/>
        <append destFile="${settings.file}"
                text="$conf['environment_indicator_overwrite'] = TRUE;${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['environment_indicator_overwritten_name'] = '${ei.name}';${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['environment_indicator_overwritten_color'] = '${ei.color}';${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['environment_indicator_overwritten_position'] = 'top';${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['environment_indicator_overwritten_fixed'] = FALSE;${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['stage_file_proxy_origin'] = '${sfp.origin}';${line.separator}"/>
        <append destFile="${settings.file}"
                text="$conf['stage_file_proxy_origin_dir'] = '${sfp.origin.dir}';${line.separator}"/>
        <append destFile="${settings.file}"
                text="error_reporting(-1);${line.separator}$conf['error_level'] = 2;${line.separator}ini_set('display_errors', TRUE);${line.separator}ini_set('display_startup_errors', TRUE);${line.separator}"/>

        <chmod file="${settings.file}" mode="755" failonerror="true"/>
    </target>

    <target name="set-file-folders" depends="load-properties">
        <chmod file="${environment.root}/sites/default/files" mode="777"
               failonerror="true"/>
    </target>

    <!-- update all code from svn -->

    <target name="svn-update-code" depends="load-project-properties">
        <foreach list="${project.modules}" param="package"
                 target="svn-update-custom"/>
        <foreach list="${project.modules2}" param="package"
                 target="svn-update-custom"/>
        <foreach list="${project.modules3}" param="package"
                 target="svn-update-custom"/>
        <foreach list="${project.features}" param="package"
                 target="svn-update-custom"/>
        <foreach list="${project.themes}" param="package"
                 target="svn-update-theme"/>
    </target>

    <!-- update individual package from svn repo -->
    <target name="svn-update-custom" depends="load-properties">
        <exec command="svn update ${environment.root}/${project.modules.destination}/${package}"/>
    </target>
    <!-- update one package from svn repo -->
    <target name="svn-update-theme">
        <exec command="svn update ${environment.root}/${project.themes.destination}/${package}"/>
    </target>

    <target name="set-development-environment"
            depends="load-project-properties, setup-phing-drush">
        <!-- downloads the contributed modules -->
        <drush command="make" assume="yes">
            <param>dev.make</param>
            <option name="contrib-destination">
                ${environment.root}/${contrib.modules.destination}
            </option>
            <option name="no-core"/>
            <option name="verbose"/>
        </drush>

        <drush command="pm-enable" assume="yes">
            <param>coffee</param>
            <param>devel</param>
            <param>devel_generate</param>
            <param>environment_indicator</param>
            <param>stage_file_proxy</param>
            <param>toolbar</param>
            <param>simpletest</param>
            <param>dblog</param>
            <param>syslog</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>admin_theme</param>
            <param>shiny</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>preprocess_css</param>
            <param>FALSE</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>preprocess_js</param>
            <param>FALSE</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>cache</param>
            <param>FALSE</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>block_cache</param>
            <param>FALSE</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>page_compression</param>
            <param>FALSE</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

        <phingcall target="set-folders"/>
        <!--<phingcall target="dev-settings" />-->
        <phingcall target="cc"/>

    </target>

    <!-- misc stuff i have no place for yet -->
    <target name="do-misc-stuff"
            depends="load-project-properties, setup-phing-drush">

        <drush command="chosenplugin">
            <option name="uri">${project.uri}</option>
            <option name="root">${project.root}/${environment.root}</option>
        </drush>

        <drush command="en" assume="yes">
            <param>chosen</param>
            <option name="uri">${project.uri}</option>
            <option name="root">${project.root}/${environment.root}</option>
        </drush>
        <phingcall target="cc"/>

    </target>

    <!-- clear cache -->
    <target name="cc" depends="load-project-properties, setup-phing-drush">

        <drush command="cc">
            <param>all</param>
            <option name="uri">${${project}.uri}</option>
            <option name="root">${${project}.root}/${environment.root}</option>
        </drush>

    </target>

    <!-- apply patches to contrib code -->
    <target name="link-project-modules" depends="load-project-properties">
        <symlink
                target="${project.root}/projects/${project.name.short}/modules/"
                link="${project.root}/${environment.root}/sites/all/modules/project"
                overwrite="true"/>
    </target>

    <!-- migrate data -->
    <target name="migrate-data" depends="load-project-properties">
        <phingcall target="cc"/>
        <foreach list="${project.migrations}" param="migration"
                 target="migrate-import"/>
    </target>

    <target name="migrate-import"
            depends="load-project-properties, setup-phing-drush">
        <drush command="migrate-import">
            <param>${migration}</param>
            <option name="update"/>
            <option name="uri">${project.uri}</option>
            <option name="root">${project.root}/${environment.root}</option>
        </drush>
    </target>

    <!-- run tests -->
    <target name="run-tests" depends="load-project-properties">
        <phingcall target="cc"/>
        <foreach list="${project.test.groups}" param="test_group"
                 target="run-test"/>
    </target>

    <target name="run-test"
            depends="load-project-properties, setup-phing-drush">
        <drush command="test-run" assume="yes" uri="${project}"
               haltonerror="no">
            <param>${test_group}</param>
            <option name="uri">${project.uri}</option>
            <option name="root">${project.root}/${environment.root}</option>
        </drush>
    </target>


    <target name="set-folders" depends="setup-phing-drush">

        <drush command="vset" assume="yes">
            <param>file_public_path</param>
            <param>${public.path}</param>
            <option name="uri">${uri}</option>
            <option name="root">${root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>file_temporary_path</param>
            <param>${temporary.path}</param>
            <option name="uri">$uri}</option>
            <option name="root">${root}</option>
        </drush>

        <drush command="vset" assume="yes">
            <param>file_private_path</param>
            <param>${private.path}</param>
            <option name="uri">${uri}</option>
            <option name="root">${root}</option>
        </drush>
        <phingcall target="cc"/>


    </target>


</project>
